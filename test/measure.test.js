const fs = require("fs")

const Scratch = require("../scratch")
const measure = require("../measure")

describe("block info", () => {
  test("when flag clicked", () => {
    expect(Scratch.blockInfo(["whenGreenFlag"])).toMatchObject({
      shape: "hat",
      category: "events",
    })
  })
})

// prettier-ignore
describe('measure scripts', () => {

  function check(height, array) {
    expect(measure(array)).toBe(height)
  }

  test("1", () => check(20, [["+", "", ""]]))
  test("2", () => check(20, [["randomFrom:to:", 1, 10]]))
  test("3", () => check(21, [["&", false, false]]))
  test("4", () => check(21, [["<", "", ""]]))
  test("5", () => check(25, [["bounceOffEdge"]]))
  test("6", () => check(47, [["bounceOffEdge"], ["bounceOffEdge"]]))
  test("7", () => check(69, [["bounceOffEdge"], ["bounceOffEdge"], ["bounceOffEdge"]]))
  test("8", () => check(25, [["wait:elapsed:from:", 1]]))
  test("9", () => check(25, [["doWaitUntil", false]]))
  test("10", () => check(49, [["doRepeat", 10, null]]))
  test("11", () => check(62, [["doRepeat", 10, [["wait:elapsed:from:", 1]]]]))
  test("12", () => check(84, [["doRepeat", 10, [["wait:elapsed:from:", 1], ["wait:elapsed:from:", 1]]]]))
  test("13", () => check(106, [["doRepeat", 10, [["wait:elapsed:from:", 1], ["wait:elapsed:from:", 1], ["wait:elapsed:from:", 1]]]]))
  test("14", () => check(46, [["doForever", null]]))
  test("15", () => check(59, [["doForever", [["wait:elapsed:from:", 1]]]]))
  test("16", () => check(81, [["doForever", [["wait:elapsed:from:", 1], ["wait:elapsed:from:", 1]]]]))
  test("17", () => check(103, [["doForever", [["wait:elapsed:from:", 1], ["wait:elapsed:from:", 1], ["wait:elapsed:from:", 1]]]]))
  test("18", () => check(25, [["forward:", 10]]))
  test("19", () => check(29, [["forward:", ["+", "", ""]]]))
  test("20", () => check(33, [["forward:", ["+", ["+", "", 10], ""]]]))
  test("21", () => check(20, [["+", "", ""]]))
  test("22", () => check(24, [["+", ["+", "", ""], ""]]))
  test("23", () => check(49, [["doIf", false, null]]))
  test("24", () => check(54, [["doIf", ["&", false, false], null]]))
  test("25", () => check(59, [["doIf", ["&", false, ["&", false, false]], null]]))
  test("26", () => check(21, [["&", false, false]]))
  test("27", () => check(26, [["&", false, ["&", false, false]]]))
  test("28", () => check(25, [["=", ["+", "", ""], ""]]))
  test("29", () => check(25, [["+", ["=", "", ""], ""]]))
  test("30", () => check(76, [["doIfElse", false, null, null]]))
  test("31", () => check(91, [["bounceOffEdge"], ["bounceOffEdge"], ["bounceOffEdge"], ["bounceOffEdge"]]))
  test("32", () => check(25, [["forward:", 10]]))
  test("33", () => check(31, [["&", false, ["&", false, ["&", false, false]]]]))
  test("34", () => check(26, [["&", false, ["not", false]]]))
  test("35", () => check(64, [["doIf", ["&", false, ["&", false, ["&", false, false]]], null]]))
  test("36", () => check(24, [["deleteClone"]]))
  test("37", () => check(25, [["setRotationStyle", "left-right"]]))
  test("38", () => check(24, [["stopScripts", "all"]]))
  test("39", () => check(25, [["stopScripts", "other scripts in sprite"]]))
  test("40", () => check(21, [["touching:", "_mouse_"]]))
  test("41", () => check(21, [["mousePressed"]]))
  test("42", () => check(20, [["mouseX"]]))
  test("43", () => check(20, [["distanceTo:", "_mouse_"]]))
  test("44", () => check(20, [["+", "", ""]]))
  test("45", () => check(41, [["whenGreenFlag"]]))
  test("46", () => check(34, [["whenKeyPressed", "space"]]))
  test("47", () => check(34, [["whenClicked"]]))
  test("48", () => check(34, [["whenSceneStarts", "backdrop1"]]))
  test("49", () => check(34, [["whenSensorGreaterThan", "loudness", 10]]))
  test("50", () => check(34, [["whenIReceive", "message1"]]))
  test("51", () => check(34, [["whenIReceive", "message1"]]))
  test("52", () => check(25, [["broadcast:", "message1"]]))
  test("53", () => check(25, [["doBroadcastAndWait", "message1"]]))
  test("54", () => check(34, [["whenCloned"]]))
  test("55", () => check(20, [["senseVideoMotion", "motion", "this sprite"]]))
  test("56", () => check(24, [["getAttribute:of:", "x position", ["+", "", ""]]]))
  test("57", () => check(25, [["setVar:to:", "asdf", 0]]))
  test("58", () => check(29, [["setVar:to:", "asdf", ["+", "", ""]]]))
  test("59", () => check(25, [["deleteLine:ofList:", 1, "list"]]))
  test("60", () => check(29, [["deleteLine:ofList:", ["+", "", ""], "list"]]))
  test("61", () => check(33, [["deleteLine:ofList:", ["+", "", ["+", "", ""]], "list"]]))
  test("62", () => check(614, [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["doForever", [["createCloneOf", "_myself_"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]))
  test("63", () => check(83, [["doForever", [["doForever", null]]]]))
  test("64", () => check(59, [["doForever", [["bounceOffEdge"]]]]))
  test("65", () => check(96, [["doForever", [["doForever", [["bounceOffEdge"]]]]]]))
  test("66", () => check(62, [["doIf", false, [["bounceOffEdge"]]]]))
  test("67", () => check(105, [["doForever", [["bounceOffEdge"], ["doIf", false, null]]]]))
  test("68", () => check(108, [["doIf", false, [["bounceOffEdge"], ["doForever", null]]]]))
  test("69", () => check(105, [["doForever", [["doIf", false, null], ["bounceOffEdge"]]]]))
  test("70", () => check(64, [["doIf", false, [["stopScripts", "all"]]]]))
  test("71", () => check(86, [["doIf", false, [["bounceOffEdge"], ["stopScripts", "all"]]]]))
  test("72", () => check(108, [["doIf", false, [["bounceOffEdge"], ["bounceOffEdge"], ["stopScripts", "all"]]]]))
  test.skip("73", () => check(51, [["procDef", "block", [], [], false]]))
  test("74", () => check(60, [["procDef", "block with a very very long name hahahahaha", [], [], false]]))
  test("75", () => check(65, [["procDef", "block with number %n string %s and boolean %b inputs", ["number", "string", "boolean"], [1, null, null], false]]))
  test("76", () => check(60, [["procDef", "aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaaaaa", [], [], false]]))
  test.skip("77", () => check(54, [["procDef", "block with", [], [], false]]))
  test("78", () => check(60, [["procDef", "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", [], [], false]]))
  test.skip("79", () => check(63, [["procDef", "block input: %n", ["input"], [1], false]]))
  test("80", () => check(64, [["procDef", "block input: %s", ["string1"], [null], false]]))
  test("81", () => check(64, [["procDef", "very long block with input: %n yes lol", ["input"], [1], false]]))
  test("82", () => check(64, [["procDef", "very long block with input %s yes haha", ["string"], [null], false]]))
  test("83", () => check(64, [["procDef", "very long block with number input %n", ["number"], [1], false]]))
  test("84", () => check(64, [["procDef", "long block with number input %n woo woo", ["number"], [1], false]]))
  test("85", () => check(64, [["procDef", "aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaaaaa %n", ["asdfasdf"], [1], false]]))
  test("86", () => check(65, [["procDef", "block with both %n number and also a boolean %b input haha", ["number1", "boolean1"], [1, null], false]]))
  test("87", () => check(65, [["procDef", "aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa %n %b", ["number1", "boolean1"], [1, null], false]]))
  test("88", () => check(65, [["procDef", "aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa %s %b", ["string1", "boolean1"], [null, null], false]]))
  test("89", () => check(64, [["procDef", "aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa  aaaaaaaaaaaaaaaaaaaaaa  aaaaaaaaaaaaaaaaaaaaaa  aaaaaaaaaaaaaaaaaaaaaa %n %s", ["number1", "string1"], [1, null], false]]))
  test("90", () => check(64, [["procDef", "aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa %n %n", ["number1", "number2"], [1, 1], false]]))
  test("91", () => check(64, [["procDef", "aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa %s %s", ["string1", "string2"], [null, null], false]]))
  test("92", () => check(65, [["procDef", "aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa %b %b", ["boolean1", "boolean2"], [null, null], false]]))
  test("93", () => check(65, [["procDef", "aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaaaaaaaaaa %b", ["boolean1"], [null], false]]))

})
